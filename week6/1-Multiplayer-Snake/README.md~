# Multiplayer Snake

This is a simple multiplayer snake game implemented as a homework project for HackBulgaria.

It utilizes the power of websockets and `Socket.io` for the server-client communication.

All drawing is performed on an HTML5 `Canvas`.

`Bootstrap` is used for the settings, create and join game interfaces.

I also used `Handlebars` for populating the table with available hosts and several convenient methods of `lodash`.

# Code structure

1. The server folder
There you have `server.js` which contains all the backend logic. It is responsible for handling the clients' requests.
Also, you'll see `package.json`, which contains information about the dependencies - the js libraries the server uses.

2. The client folder
It has two .js files - `main.js` and `client.js`. `client.js` handles the requests, such as syncing the snakes, etc. `main.js` contains all the game logic.
`index.html` is the file you want to start to run the game. It includes the aforementioned .js files.
`bower.json`, similar to `package.json` but for the client side, contains information about the js libraries the client uses.
The folder also contains the font used in the game as well as two PNGs for the grass and the snake food.

# A bit more technical

If you run the game for the first time, as soon as you start it, a modal will be displayed, asking you to enter your name. It will be saved to localStorage and will never ask you again.

The game then starts with a GET request to `/games`. As soon as JSON with all the available hosts and players is returned from the server, the game displays a modal asking you to either create or join a game. This is where we used the JSON from `/games` we have - with `handlebars`, we populate the table with available games.

Since the game is expected to run on 2 or more clients, as soon as one client creates a game, the rest of the clients are immidiately updated with the game the host just created.

When one player has joined a game, the game immidiately starts. 

A `move` event is dispatched to the server for every frame of the game. This event contains info about the snakes' positions and their food's position. The server then immidiately responds with a `render` event containing the very same info but sent to all of the clients.
Note that when player1 receives a `render` event, only the positions of player2 and the food are updated.

For the countdown timer, we use a regular setInterval function.
Note that the countdown timer is different for both snakes - for each one it displays the time it has to eat before dying.

The game is won by the last snake to survive (meaning to eat often enough and not hit a wall or itself).  

# How to run the game

Before running the game, you must first prepare your server:
1. From the source code, copy the server folder and paste it in your server.
2. From the terminal, navigate to the server folder and run `npm install` and then `node server.js`
3. If everything is successful, the terminal will say it's listening on port 3000.

Now that the server side is up and running, you must prepare the clients as well:
1. From the source code, copy the client folder and paste it in your client.
2. From the terminal, navigate to the client folder and run `bower install`.
3. Open `index.html` in the browser.
4. Have fun.

You need to make these configurations on 2 or more clients in order to play. (it's called a mutiplayer game for a reason, duh)


